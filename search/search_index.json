{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"dtx_to_wif Convert FiberWorks .dtx and WeavePoint .wpo weaving pattern files to WIF 1.1. You do not need a copy of FiberWorks or WeavePoint to use this software. Conversion is done using a terminal . If you are not comfortable using a terminal, this may not be the right package for you. This package can also be used by weaving-related software to read supported weaving pattern files . Converting Files First install the software. Pay careful attention to where the dtx_to_wif and wpo_to_wif executables are installed. The path will be long on Windows. Run your terminal application . Type the following on macOS or unix: dtx_to_wif path1 path2 ... If dtx_to_wif is not found, specify the path to it, as described in installing . On Windows type: <...path to dtx_to_wif...>\\dtx_to_wif.exe path1 path2 ... where <...path to dtx_to_wif...> is the path to the file, as shown when you installed dtx_to_wif . The path arguments can files or directories. All files in a directory are converted, as well as all subdirectories, sub-sub-directories, etc. Replace \"dtx\" with \"wpo\" to convert WeavePoint .wpo files. Each new WIF file is written to the same directory as the original file with the same file name but a \".wif\" extension. If a WIF file with that path already exists, the old file is left unchanged, with a warning. To overwrite existing files, run the command with option --overwrite . If you run the command with option -h you will see all available options. Reading Files Into Memory dtx_to_wif can read .dtx, .wif, and .wpo pattern files into an instance of [dtx_to_wif.PatternData][dtx_to_wif.pattern_data.PatternData]. This is used by base_loom_server dobby loom control software. It could also be used by pattern visualization software and weaving design software. To read a weaving pattern from a file, call [dtx_to_wif.read_pattern_file][dtx_to_wif.pattern_reader.read_pattern_file]. To read a weaving pattern from a string, call [dtx_to_wif.read_pattern_data][dtx_to_wif.pattern_reader.read_pattern_data]. To write [dtx_to_wif.PatternData][dtx_to_wif.pattern_data.PatternData] to a WIF file, call [dtx_to_wif.write_wif][dtx_to_wif.wif_writer.write_wif]. Terminal Applications The standard terminal applications are Terminal for macOS, and cmd.exe for Windows. Other terminal applications are available, but the standard ones are fine. Links PyPi Documentation Source Code Issue Tracker Limitations Known differences from the WIF files that FiberWorks writes: The date the dtx file was created is not written to the WIF file, since WIF has no standard location for this information. FiberWorks saves it as a comment in the [TEXT] section (\"; Creation ...\"). The default colors and separations for warp and weft may not match. This is just an internal detail, as the resulting pattern is the same. (I have not figured out the algorithm FiberWorks uses to choose default colors and separations.) The WeavePoint .wpo reader cannot read per-thread thickness or separation data. Due to this limitation I consider wpo_to_wif only marginally useful. The main use case for reading WeavePoint files is to support dobby loom control software. License This software is licensed under the MIT license. See license.txt for details.","title":"Home"},{"location":"#dtx_to_wif","text":"Convert FiberWorks .dtx and WeavePoint .wpo weaving pattern files to WIF 1.1. You do not need a copy of FiberWorks or WeavePoint to use this software. Conversion is done using a terminal . If you are not comfortable using a terminal, this may not be the right package for you. This package can also be used by weaving-related software to read supported weaving pattern files .","title":"dtx_to_wif"},{"location":"#converting-files","text":"First install the software. Pay careful attention to where the dtx_to_wif and wpo_to_wif executables are installed. The path will be long on Windows. Run your terminal application . Type the following on macOS or unix: dtx_to_wif path1 path2 ... If dtx_to_wif is not found, specify the path to it, as described in installing . On Windows type: <...path to dtx_to_wif...>\\dtx_to_wif.exe path1 path2 ... where <...path to dtx_to_wif...> is the path to the file, as shown when you installed dtx_to_wif . The path arguments can files or directories. All files in a directory are converted, as well as all subdirectories, sub-sub-directories, etc. Replace \"dtx\" with \"wpo\" to convert WeavePoint .wpo files. Each new WIF file is written to the same directory as the original file with the same file name but a \".wif\" extension. If a WIF file with that path already exists, the old file is left unchanged, with a warning. To overwrite existing files, run the command with option --overwrite . If you run the command with option -h you will see all available options.","title":"Converting Files"},{"location":"#reading-files-into-memory","text":"dtx_to_wif can read .dtx, .wif, and .wpo pattern files into an instance of [dtx_to_wif.PatternData][dtx_to_wif.pattern_data.PatternData]. This is used by base_loom_server dobby loom control software. It could also be used by pattern visualization software and weaving design software. To read a weaving pattern from a file, call [dtx_to_wif.read_pattern_file][dtx_to_wif.pattern_reader.read_pattern_file]. To read a weaving pattern from a string, call [dtx_to_wif.read_pattern_data][dtx_to_wif.pattern_reader.read_pattern_data]. To write [dtx_to_wif.PatternData][dtx_to_wif.pattern_data.PatternData] to a WIF file, call [dtx_to_wif.write_wif][dtx_to_wif.wif_writer.write_wif].","title":"Reading Files Into Memory"},{"location":"#terminal-applications","text":"The standard terminal applications are Terminal for macOS, and cmd.exe for Windows. Other terminal applications are available, but the standard ones are fine.","title":"Terminal Applications"},{"location":"#links","text":"PyPi Documentation Source Code Issue Tracker","title":"Links"},{"location":"#limitations","text":"Known differences from the WIF files that FiberWorks writes: The date the dtx file was created is not written to the WIF file, since WIF has no standard location for this information. FiberWorks saves it as a comment in the [TEXT] section (\"; Creation ...\"). The default colors and separations for warp and weft may not match. This is just an internal detail, as the resulting pattern is the same. (I have not figured out the algorithm FiberWorks uses to choose default colors and separations.) The WeavePoint .wpo reader cannot read per-thread thickness or separation data. Due to this limitation I consider wpo_to_wif only marginally useful. The main use case for reading WeavePoint files is to support dobby loom control software.","title":"Limitations"},{"location":"#license","text":"This software is licensed under the MIT license. See license.txt for details.","title":"License"},{"location":"installing/","text":"Installing Check if you have Python installed. Run your terminal application . At the prompt type: python --version If Python is installed, this will print a version number. If that version number is at least 3.7, you may skip the next step (though you might wish to upgrade your Python if it's very old). (People who wish to contribute to this package should install Python 3.10 or later, because mkdocs requires that to build documentation). If necessary, install Python 3.7 or later. The link has installers for common operating systems. However, on Windows you may want to try Microsoft's app store. Install this dtx_to_wif package. python -m pip install dtx_to_wif Watch the output carefully. Near the end, pip should tell you where it installed executables dtx_to_wif and wpo_to_wif . On Windows these will have extension \".exe\", and they will probably be deeply buried. Record this information so you can find it later! Test your installation. On macOS or linux try the following first: dtx_to_wif -h This should run the application and print some help. If it does not, specify the full path: path-to-executable/dtx_to_wif -h If that is necessary, consider adding the directory containing dtx_to_wif to your PATH, or creating aliases for the dtx_to_wif and wpo_to_wif executables. Describing how is out of scope for this document, but instructions are widely available. On Windows type the following (note the \".exe\" suffix): path-to-executable\\dtx_to_wif.exe -h To upgrade to a newer version of dtx_to_wif : python -m pip install --upgrade dtx_to_wif You can also specify a specific version; seee pip's documentation for details.","title":"Installing"},{"location":"installing/#installing","text":"Check if you have Python installed. Run your terminal application . At the prompt type: python --version If Python is installed, this will print a version number. If that version number is at least 3.7, you may skip the next step (though you might wish to upgrade your Python if it's very old). (People who wish to contribute to this package should install Python 3.10 or later, because mkdocs requires that to build documentation). If necessary, install Python 3.7 or later. The link has installers for common operating systems. However, on Windows you may want to try Microsoft's app store. Install this dtx_to_wif package. python -m pip install dtx_to_wif Watch the output carefully. Near the end, pip should tell you where it installed executables dtx_to_wif and wpo_to_wif . On Windows these will have extension \".exe\", and they will probably be deeply buried. Record this information so you can find it later! Test your installation. On macOS or linux try the following first: dtx_to_wif -h This should run the application and print some help. If it does not, specify the full path: path-to-executable/dtx_to_wif -h If that is necessary, consider adding the directory containing dtx_to_wif to your PATH, or creating aliases for the dtx_to_wif and wpo_to_wif executables. Describing how is out of scope for this document, but instructions are widely available. On Windows type the following (note the \".exe\" suffix): path-to-executable\\dtx_to_wif.exe -h To upgrade to a newer version of dtx_to_wif : python -m pip install --upgrade dtx_to_wif You can also specify a specific version; seee pip's documentation for details.","title":"Installing"},{"location":"version_history/","text":"Version History 4.3 2025-05-01 Add API documentation using MkAPI. Change code documentation from numpy to google doc format. 4.2.1 2025-04-28 Add mkdocs documentation, including a version history. Update github links to point to dtx_to_wif instead of dtx_to_wif_converter. 4.2 2025-04-18 Add read_pattern_data and read_pattern_file functions, which read any supported file format. This is now the recommended way to read pattern files. Fix reading WeavePoint files with multi-byte masks. Improve WeavePoint test data. At this point I consider WeavePoint .wpo files support to be release quality. The code still cannot read thread thickness and separation, but adding that would require information from the WeavePoint folks that they have been reluctant to provide, or risky reverse-engineering. 4.1.1 2025-04-07 Fix color range when reading WeavePoint files 4.1 2025-04-03 Factor out common code between run_dtx_to_wif and run_wpo_to_wif into a new internal function. 4.0 2025-04-02 Add experimental support for reading WeavePoint .wpo files and converting them to WIF files. 3.2 2025-03-13 Update the ReadMe. Move test data into the package and use standard packaging tools to read them. Remove pytest as a requirement. 3.1.0 2025-03-13 Bug fix: read_wif failed on files with no value after the key 3.0.2 2025-01-27 ReadMe.md: clarify an instruction. PatternData: fix a doc string. Simplify the way the build system (pyproject.toml) finds non-Python files. 3.0.1 2024-12-07 Add py.typed file so that other software can see this package's type hints (e.g. when running mypy). 3.0 2024-11-25 Rename the DrawdownData class to PatternData , and generally use the term \"pattern\" or \"weaving pattern\" instead of \"drawdown. This should only affect software that uses dtx_to_wif as a library. 2.0 2024-09-23 Make a pip-installable package. Add read_wif function to read WIF files. Rename the dtx reader to read_dtx . Rename the WIF writer to write_wif . Read file data into DrawdownData , a dataclass that is intended to model the WIF standard. Expand the unit tests. 1.2 2024-06-10 Unify color and separation handling: If all values are default, omit the relevant section. If any values are not default, list the value for every end or pick. Add a unit test. 1.1 2024-06-10 Bug fix: only folders (not files) could be specified as input. 1.0 2024-06-08 First release","title":"Version History"},{"location":"version_history/#version-history","text":"","title":"Version History"},{"location":"version_history/#43-2025-05-01","text":"Add API documentation using MkAPI. Change code documentation from numpy to google doc format.","title":"4.3 2025-05-01"},{"location":"version_history/#421-2025-04-28","text":"Add mkdocs documentation, including a version history. Update github links to point to dtx_to_wif instead of dtx_to_wif_converter.","title":"4.2.1 2025-04-28"},{"location":"version_history/#42-2025-04-18","text":"Add read_pattern_data and read_pattern_file functions, which read any supported file format. This is now the recommended way to read pattern files. Fix reading WeavePoint files with multi-byte masks. Improve WeavePoint test data. At this point I consider WeavePoint .wpo files support to be release quality. The code still cannot read thread thickness and separation, but adding that would require information from the WeavePoint folks that they have been reluctant to provide, or risky reverse-engineering.","title":"4.2 2025-04-18"},{"location":"version_history/#411-2025-04-07","text":"Fix color range when reading WeavePoint files","title":"4.1.1 2025-04-07"},{"location":"version_history/#41-2025-04-03","text":"Factor out common code between run_dtx_to_wif and run_wpo_to_wif into a new internal function.","title":"4.1 2025-04-03"},{"location":"version_history/#40-2025-04-02","text":"Add experimental support for reading WeavePoint .wpo files and converting them to WIF files.","title":"4.0 2025-04-02"},{"location":"version_history/#32-2025-03-13","text":"Update the ReadMe. Move test data into the package and use standard packaging tools to read them. Remove pytest as a requirement.","title":"3.2 2025-03-13"},{"location":"version_history/#310-2025-03-13","text":"Bug fix: read_wif failed on files with no value after the key","title":"3.1.0 2025-03-13"},{"location":"version_history/#302-2025-01-27","text":"ReadMe.md: clarify an instruction. PatternData: fix a doc string. Simplify the way the build system (pyproject.toml) finds non-Python files.","title":"3.0.2 2025-01-27"},{"location":"version_history/#301-2024-12-07","text":"Add py.typed file so that other software can see this package's type hints (e.g. when running mypy).","title":"3.0.1 2024-12-07"},{"location":"version_history/#30-2024-11-25","text":"Rename the DrawdownData class to PatternData , and generally use the term \"pattern\" or \"weaving pattern\" instead of \"drawdown. This should only affect software that uses dtx_to_wif as a library.","title":"3.0 2024-11-25"},{"location":"version_history/#20-2024-09-23","text":"Make a pip-installable package. Add read_wif function to read WIF files. Rename the dtx reader to read_dtx . Rename the WIF writer to write_wif . Read file data into DrawdownData , a dataclass that is intended to model the WIF standard. Expand the unit tests.","title":"2.0 2024-09-23"},{"location":"version_history/#12-2024-06-10","text":"Unify color and separation handling: If all values are default, omit the relevant section. If any values are not default, list the value for every end or pick. Add a unit test.","title":"1.2 2024-06-10"},{"location":"version_history/#11-2024-06-10","text":"Bug fix: only folders (not files) could be specified as input.","title":"1.1 2024-06-10"},{"location":"version_history/#10-2024-06-08","text":"First release","title":"1.0 2024-06-08"},{"location":"api/dtx_to_wif/","text":"dtx_to_wif source package dtx_to_wif Classes TreadlingType WarpWeftData \u2014 Information for the WARP or WEFT sections of a WIF file. PatternData \u2014 Data for a weaving pattern. Functions read_pattern_data \u2014 Read a weaving pattern from a data string. read_pattern_file \u2014 Read a weaving pattern file run_dtx_to_wif \u2014 Command-line script to convert FiberWorks .dtx files to WIF. run_wpo_to_wif \u2014 Command-line script convert WeavePoint .wpo files to WIF. read_dtx \u2014 Parse a dtx weaving file into PatternData read_wif \u2014 Parse a wif weaving file into PatternData write_wif \u2014 Write a WIF file from parsed dtx data to the specified file. read_wpo \u2014 Read a WeavePoint wpo weaving file as PatternData enum TreadlingType ( * args , ** kwds ) Bases : enum . Enum Attributes SingleTreadle MultiTreadle Liftplan dataclass WarpWeftData ( threads : int = 0 , color : int | None = None , color_rgb : tuple[int, int, int] | None = None , spacing : float | None = None , thickness : float | None = None , units : str | None = None ) Information for the WARP or WEFT sections of a WIF file. Parameters threads : int \u2014 The number of threads. PatternData increases the value, if needed, so the default value of 0 results in the minimum required to satisfy the weaving pattern. color : int | None \u2014 Default color index (index into color table). color_rgb : tuple[int, int, int] | None \u2014 Default color as r,g,b. spacing : float | None \u2014 Default thread spacing. thickness : float | None \u2014 Default thread thickness. units : str | None \u2014 Inits for spacing and thickness. dataclass PatternData ( name : str , threading : dict[int, set[int]] , tieup : dict[int, set[int]] , treadling : dict[int, set[int]] , liftplan : dict[int, set[int]] , color_table : dict[int, tuple[int, int, int]] , warp : WarpWeftData , weft : WarpWeftData , warp_colors : dict[int, int] = dataclasses . field (default_factory=dict) , warp_spacing : dict[int, float] = dataclasses . field (default_factory=dict) , warp_thickness : dict[int, float] = dataclasses . field (default_factory=dict) , weft_colors : dict[int, int] = dataclasses . field (default_factory=dict) , weft_spacing : dict[int, float] = dataclasses . field (default_factory=dict) , weft_thickness : dict[int, float] = dataclasses . field (default_factory=dict) , color_range : tuple[int, int] | None = None , is_rising_shed : bool = True , source_program : str = '?' , source_version : str = '?' , num_shafts : int = 0 , num_treadles : int = 0 ) Data for a weaving pattern. The contents and format are intended to match the WIF specification. Thus indices are 1-based. Note that 0 is the standard value for \"does not exist\" or \"does nothing\". For example shaft 0 holds no warp threads and treadle 0 lifts no shafts. Parameters name : str \u2014 Original file name. threading : dict[int, set[int]] \u2014 Dict of thread index: shafts, where shaft is a set of shafts. Omitted entries are not threaded on any shaft. The values are sets of integers, instead of single integers, because WIF supports threading on more than one shaft. tieup : dict[int, set[int]] \u2014 Dict of treadle: shaft set. Omitted entries raise no shafts. treadling : dict[int, set[int]] \u2014 Dict of pick index: treadle set. Omitted entries raise no shafts. liftplan : dict[int, set[int]] \u2014 Dict of pick index: shafts where shafts is a set of 1-based shafts. Omitted picks lift nothing. Omitted entries raise no shafts. color_table : dict[int, tuple[int, int, int]] \u2014 Dict of color index: color tuple, where each color is a tuple of (r, g, b) values. The keys must include all integers from 1 through len(color_table). warp : WarpWeftData \u2014 Warp data; see WarpWeftData. weft : WarpWeftData \u2014 Weft data; see WarpWeftData. warp_colors : dict[int, int] \u2014 Color for each warp thread, as a dict of thread index: index into color_table. warp_spacing : dict[int, float] \u2014 Space each thread takes up, as a dict of thread index: spacing. warp_thickness : dict[int, float] \u2014 Thickness of each thread, as a dict of thread index: thickness. weft_colors : dict[int, int] \u2014 Color for each weft thread, as a dict of thread index: index into color_table. weft_spacing : dict[int, float] \u2014 Space each thread takes up, as a dict of thread index: spacing. weft_thickness : dict[int, float] \u2014 Thickness of each thread, as a dict of thread index: thickness. color_range : tuple[int, int] | None \u2014 Minimum, maximum allowed color value (inclusive). is_rising_shed : bool \u2014 If true, shafts go up, if false, shafts go down. source_program : str \u2014 Name of program that wrote the original file. source_version : str \u2014 Version of pogram that wrote the original file. num_shafts : int \u2014 Number of shafts. num_treadles : int \u2014 Number of treadles. Note Many fields are cleaned up in postprocessing: num_shafts and num_treadles are increased, if needed, based on computation from threading , tieup , treadling , and liftplan . Thus you can set each of these to 0 (the default) to have them set to the smallest value required. The only reason to specify a value larger than the actual number of shafts or treadles is as a placeholder for an incomplete weaving pattern--one you are working on and have not yet provided all threadings or treadlings. Warp/weft colors, spacing , and thickness have keys sorted, and default values are deleted. color_table has keys sorted. threading , tieup , treadling , and liftplan have their keys sorted in ascending order. Also entries with value {} or {0} are removed, since those values mean the same thing as no entry. However, 0 is not removed from sets containing other values. Raises RuntimeError \u2014 If there is missing treadling information. The data must either include both of tieup and treadling, or else liftplan. RuntimeError \u2014 If there are more treadles in treadling than in tieup. If any color values are out of range. RuntimeError \u2014 If the color keys are not a complete set 1, 2, ... N (though they don't have to sorted on input). RuntimeError \u2014 If warp_colors or weft_colors is specified, but not color_table . RuntimeError \u2014 If color_table is specified, but not color_range . RuntimeError \u2014 If color_range invalid: length != 2 or color_range[0] (min) >= color_range[1] (max) read_pattern_data ( data : str , suffix : str , name : str ) Read a weaving pattern from a data string. For WeavePoint .wpo files, which are binary, encode the data as base64, e.g. using base64.b64decode(data_bytes) . Parameters data : str \u2014 Pattern data. WeavePoint data must be encoded as base64. suffix : str \u2014 Pattern file suffix: one of \".dtx\", \".wif\", \".wpo\". name : str \u2014 Pattern name. Typically the file name (including suffix). Raises NotImplementedError read_pattern_file ( filepath : PathLike | str ) \u2192 PatternData Read a weaving pattern file Parameters filepath : PathLike | str \u2014 Path to file. Raises NotImplementedError run_dtx_to_wif ( ) \u2192 None Command-line script to convert FiberWorks .dtx files to WIF. run_wpo_to_wif ( ) \u2192 None Command-line script convert WeavePoint .wpo files to WIF. read_dtx ( f : TextIO , filename : str = '?' ) \u2192 PatternData Parse a dtx weaving file into PatternData Leading and trailing whitespace are stripped and blank lines are ignored. Parameters f : TextIO \u2014 The dtx file. filename : str \u2014 The file name. Usually ignored, but used as the pattern name if the dtx file does not have a \"description\" section. read_wif ( f : TextIO , filename : str = '?' ) \u2192 PatternData Parse a wif weaving file into PatternData Leading and trailing whitespace are stripped and blank lines are ignored. Parameters f : TextIO \u2014 The wif file. filename : str \u2014 The file name. Usually ignored, but used as the pattern name if the wif file does not have a Title line in the [TEXT] section. Raises RuntimeError write_wif ( f : TextIO , data : PatternData ) \u2192 None Write a WIF file from parsed dtx data to the specified file. Parameters f : TextIO \u2014 File-like object to write to. data : PatternData \u2014 Parsed data. Raises RuntimeError read_wpo ( f : BinaryIO , filename : str ) \u2192 PatternData Read a WeavePoint wpo weaving file as PatternData Does not read per-thread thickness and separation are not read, because the company has not told me how to access that information. Parameters f : BinaryIO \u2014 A readable binary file filename : str \u2014 The file name. Used as the pattern name. Raises RuntimeError","title":"dtx_to_wif"},{"location":"src/dtx_to_wif/","text":"dtx_to_wif docs package dtx_to_wif 1 2 3 4 5 6 7 8 9 10 11 12 # isort: skip_file try : from .version import * except ImportError : __version__ = \"?\" from .pattern_data import * from .pattern_reader import * from .run_x_to_wif import * from .dtx_reader import * from .wif_reader import * from .wif_writer import * from .wpo_reader import *","title":"dtx_to_wif"}]}