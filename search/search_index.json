{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"dtx_to_wif Convert FiberWorks .dtx and WeavePoint .wpo weaving pattern files to WIF 1.1. You do not need a copy of FiberWorks or WeavePoint to use this software. Conversion is done using a terminal . If you are not comfortable using a terminal, this may not be the right package for you. This package can also read .wif, .dtx, and .wpo files into an in-memory class, which is the same for all supported file formats. Converting Files First install the software. Pay careful attention to where the dtx_to_wif and wpo_to_wif executables are installed. The path will be long on Windows. Run your terminal application . Type the following on macOS or unix: dtx_to_wif path1 path2 ... If this fails, specify the path to dtx_to_wif (as shown when you installed the package), or add its directory to the PATH. On Windows type: <...path to dtx_to_wif...>dtx_to_wif.exe path1 path2 ... where <...path to dtx_to_wif...> is the path to the file, as shown when you installed dtx_to_wif . The path arguments can files or directories. All files in a directory are converted, as well as all subdirectories, sub-sub-directories, etc. Replace \"dtx\" with \"wpo\" to convert WeavePoint .wpo files. Each new WIF file is written to the same directory as the original file with the same file name but a \".wif\" extension. If a WIF file with that path already exists, the old file is left unchanged, with a warning. To overwrite existing files, run the command with option --overwrite . If you run the command with option -h you will see all available options. Reading Files Into Memory This package can also read weaving pattern files into an in-memory representation, class dtx_to_wif.PatternData . This could be used by dobby loom control software, pattern visualization software, or weaving design software. To read a weaving pattern file that is in any supported format, call dtx_to_wif.read_pattern_file(filepath) . To read a weaving pattern file from a string, call dtx_to_wif.read_pattern_data(data: str, suffix: str, name: str) . Encode WeavePoint files, which are binary, as base64. The suffix must include a leading period, e.g. \".dtx\". To write dtx_to_wif.PatternData to a WIF file, call write_wif . Terminal Applications The standard terminal applications are \"Terminal\" for macOS, and \"cmd.exe\" for Windows. Other terminal applications are available, but the standard ones are fine. Limitations Known differences from the WIF files that FiberWorks writes: The date the dtx file was created is not written to the WIF file, since WIF has no standard location for this information. FiberWorks saves it as a comment in the [TEXT] section (\"; Creation ...\"). The default colors and separations for warp and weft may not match. This is just an internal detail, as the resulting pattern is the same. (I have not figured out the algorithm FiberWorks uses to choose default colors and separations.) The WeavePoint .wpo reader cannot read per-thread thickness or separation data. Due to this limitation I consider wpo_to_wif only marginally useful. The main use case for reading WeavePoint files is to support dobby loom control software. License This software is licensed under the MIT license; see license.txt for details.","title":"Home"},{"location":"#dtx_to_wif","text":"Convert FiberWorks .dtx and WeavePoint .wpo weaving pattern files to WIF 1.1. You do not need a copy of FiberWorks or WeavePoint to use this software. Conversion is done using a terminal . If you are not comfortable using a terminal, this may not be the right package for you. This package can also read .wif, .dtx, and .wpo files into an in-memory class, which is the same for all supported file formats.","title":"dtx_to_wif"},{"location":"#converting-files","text":"First install the software. Pay careful attention to where the dtx_to_wif and wpo_to_wif executables are installed. The path will be long on Windows. Run your terminal application . Type the following on macOS or unix: dtx_to_wif path1 path2 ... If this fails, specify the path to dtx_to_wif (as shown when you installed the package), or add its directory to the PATH. On Windows type: <...path to dtx_to_wif...>dtx_to_wif.exe path1 path2 ... where <...path to dtx_to_wif...> is the path to the file, as shown when you installed dtx_to_wif . The path arguments can files or directories. All files in a directory are converted, as well as all subdirectories, sub-sub-directories, etc. Replace \"dtx\" with \"wpo\" to convert WeavePoint .wpo files. Each new WIF file is written to the same directory as the original file with the same file name but a \".wif\" extension. If a WIF file with that path already exists, the old file is left unchanged, with a warning. To overwrite existing files, run the command with option --overwrite . If you run the command with option -h you will see all available options.","title":"Converting Files"},{"location":"#reading-files-into-memory","text":"This package can also read weaving pattern files into an in-memory representation, class dtx_to_wif.PatternData . This could be used by dobby loom control software, pattern visualization software, or weaving design software. To read a weaving pattern file that is in any supported format, call dtx_to_wif.read_pattern_file(filepath) . To read a weaving pattern file from a string, call dtx_to_wif.read_pattern_data(data: str, suffix: str, name: str) . Encode WeavePoint files, which are binary, as base64. The suffix must include a leading period, e.g. \".dtx\". To write dtx_to_wif.PatternData to a WIF file, call write_wif .","title":"Reading Files Into Memory"},{"location":"#terminal-applications","text":"The standard terminal applications are \"Terminal\" for macOS, and \"cmd.exe\" for Windows. Other terminal applications are available, but the standard ones are fine.","title":"Terminal Applications"},{"location":"#limitations","text":"Known differences from the WIF files that FiberWorks writes: The date the dtx file was created is not written to the WIF file, since WIF has no standard location for this information. FiberWorks saves it as a comment in the [TEXT] section (\"; Creation ...\"). The default colors and separations for warp and weft may not match. This is just an internal detail, as the resulting pattern is the same. (I have not figured out the algorithm FiberWorks uses to choose default colors and separations.) The WeavePoint .wpo reader cannot read per-thread thickness or separation data. Due to this limitation I consider wpo_to_wif only marginally useful. The main use case for reading WeavePoint files is to support dobby loom control software.","title":"Limitations"},{"location":"#license","text":"This software is licensed under the MIT license; see license.txt for details.","title":"License"},{"location":"installing/","text":"Installing Check if you have Python installed. Run your terminal application (called Terminal on macOS and cmd.exe on Windows). At the prompt type: python --version If Python is installed, this will print a version number. If that version number is at least 3.7, you may skip the next step (though you might wish to upgrade your Python if it's very old). If necessary, install Python 3.7 or later. The link has installers for common operating systems. However, on Windows you may want to try Microsoft's app store. Install this dtx_to_wif package. python -m pip install dtx_to_wif Watch the output carefully. Near the end, pip should tell you where it installed executables dtx_to_wif and wpo_to_wif . On Windows these will have extension \".exe\", and they will probably be deeply buried. Record this information so you can find it later! Test your installation. On macOS or linux try the following first: dtx_to_wif -h This should run the application and print some help. If it does not, specify the full path: path-to-executable/dtx_to_wif -h If that is necessary, consider adding the directory containing dtx_to_wif to your PATH, or creating aliases for the dtx_to_wif and wpo_to_wif executables. Describing how is out of scope for this document, but instructions are widely available. On Windows type the following (note the \".exe\" suffix): path-to-executable\\dtx_to_wif.exe -h To upgrade to a newer version of dtx_to_wif : python -m pip install --upgrade dtx_to_wif You can also specify a specific version; seee pip's documentation for details.","title":"Installing"},{"location":"installing/#installing","text":"Check if you have Python installed. Run your terminal application (called Terminal on macOS and cmd.exe on Windows). At the prompt type: python --version If Python is installed, this will print a version number. If that version number is at least 3.7, you may skip the next step (though you might wish to upgrade your Python if it's very old). If necessary, install Python 3.7 or later. The link has installers for common operating systems. However, on Windows you may want to try Microsoft's app store. Install this dtx_to_wif package. python -m pip install dtx_to_wif Watch the output carefully. Near the end, pip should tell you where it installed executables dtx_to_wif and wpo_to_wif . On Windows these will have extension \".exe\", and they will probably be deeply buried. Record this information so you can find it later! Test your installation. On macOS or linux try the following first: dtx_to_wif -h This should run the application and print some help. If it does not, specify the full path: path-to-executable/dtx_to_wif -h If that is necessary, consider adding the directory containing dtx_to_wif to your PATH, or creating aliases for the dtx_to_wif and wpo_to_wif executables. Describing how is out of scope for this document, but instructions are widely available. On Windows type the following (note the \".exe\" suffix): path-to-executable\\dtx_to_wif.exe -h To upgrade to a newer version of dtx_to_wif : python -m pip install --upgrade dtx_to_wif You can also specify a specific version; seee pip's documentation for details.","title":"Installing"},{"location":"version_history/","text":"Version History 4.2.1 2025-04-28 Add mkdocs documentation, including a version history. Update github links to point to dtx_to_wif instead of dtx_to_wif_converter. 4.2 2025-04-18 Add read_pattern_data and read_pattern_file functions, which read any supported file format. This is now the recommended way to read pattern files. Fix reading WeavePoint files with multi-byte masks. Improve WeavePoint test data. At this point I consider WeavePoint .wpo files support to be release quality. The code still cannot read thread thickness and separation, but adding that would require information from the WeavePoint folks that they have been reluctant to provide, or risky reverse-engineering. 4.1.1 2025-04-07 Fix color range when reading WeavePoint files 4.1 2025-04-03 Factor out common code between run_dtx_to_wif and run_wpo_to_wif into a new internal function. 4.0 2025-04-02 Add experimental support for reading WeavePoint .wpo files and converting them to WIF files. 3.2 2025-03-13 Update the ReadMe. Move test data into the package and use standard packaging tools to read them. Remove pytest as a requirement. 3.1.0 2025-03-13 Bug fix: read_wif failed on files with no value after the key 3.0.2 2025-01-27 ReadMe.md: clarify an instruction. PatternData: fix a doc string. Simplify the way the build system (pyproject.toml) finds non-Python files. 3.0.1 2024-12-07 Add py.typed file so that other software can see this package's type hints (e.g. when running mypy). 3.0 2024-11-25 Rename the DrawdownData class to PatternData , and generally use the term \"pattern\" or \"weaving pattern\" instead of \"drawdown. This should only affect software that uses dtx_to_wif as a library. 2.0 2024-09-23 Make a pip-installable package. Add read_wif function to read WIF files. Rename the dtx reader to read_dtx . Rename the WIF writer to write_wif . Read file data into DrawdownData , a dataclass that is intended to model the WIF standard. Expand the unit tests. 1.2 2024-06-10 Unify color and separation handling: If all values are default, omit the relevant section. If any values are not default, list the value for every end or pick. Add a unit test. 1.1 2024-06-10 Bug fix: only folders (not files) could be specified as input. 1.0 2024-06-08 First release","title":"Version Histsory"},{"location":"version_history/#version-history","text":"","title":"Version History"},{"location":"version_history/#421-2025-04-28","text":"Add mkdocs documentation, including a version history. Update github links to point to dtx_to_wif instead of dtx_to_wif_converter.","title":"4.2.1 2025-04-28"},{"location":"version_history/#42-2025-04-18","text":"Add read_pattern_data and read_pattern_file functions, which read any supported file format. This is now the recommended way to read pattern files. Fix reading WeavePoint files with multi-byte masks. Improve WeavePoint test data. At this point I consider WeavePoint .wpo files support to be release quality. The code still cannot read thread thickness and separation, but adding that would require information from the WeavePoint folks that they have been reluctant to provide, or risky reverse-engineering.","title":"4.2 2025-04-18"},{"location":"version_history/#411-2025-04-07","text":"Fix color range when reading WeavePoint files","title":"4.1.1 2025-04-07"},{"location":"version_history/#41-2025-04-03","text":"Factor out common code between run_dtx_to_wif and run_wpo_to_wif into a new internal function.","title":"4.1 2025-04-03"},{"location":"version_history/#40-2025-04-02","text":"Add experimental support for reading WeavePoint .wpo files and converting them to WIF files.","title":"4.0 2025-04-02"},{"location":"version_history/#32-2025-03-13","text":"Update the ReadMe. Move test data into the package and use standard packaging tools to read them. Remove pytest as a requirement.","title":"3.2 2025-03-13"},{"location":"version_history/#310-2025-03-13","text":"Bug fix: read_wif failed on files with no value after the key","title":"3.1.0 2025-03-13"},{"location":"version_history/#302-2025-01-27","text":"ReadMe.md: clarify an instruction. PatternData: fix a doc string. Simplify the way the build system (pyproject.toml) finds non-Python files.","title":"3.0.2 2025-01-27"},{"location":"version_history/#301-2024-12-07","text":"Add py.typed file so that other software can see this package's type hints (e.g. when running mypy).","title":"3.0.1 2024-12-07"},{"location":"version_history/#30-2024-11-25","text":"Rename the DrawdownData class to PatternData , and generally use the term \"pattern\" or \"weaving pattern\" instead of \"drawdown. This should only affect software that uses dtx_to_wif as a library.","title":"3.0 2024-11-25"},{"location":"version_history/#20-2024-09-23","text":"Make a pip-installable package. Add read_wif function to read WIF files. Rename the dtx reader to read_dtx . Rename the WIF writer to write_wif . Read file data into DrawdownData , a dataclass that is intended to model the WIF standard. Expand the unit tests.","title":"2.0 2024-09-23"},{"location":"version_history/#12-2024-06-10","text":"Unify color and separation handling: If all values are default, omit the relevant section. If any values are not default, list the value for every end or pick. Add a unit test.","title":"1.2 2024-06-10"},{"location":"version_history/#11-2024-06-10","text":"Bug fix: only folders (not files) could be specified as input.","title":"1.1 2024-06-10"},{"location":"version_history/#10-2024-06-08","text":"First release","title":"1.0 2024-06-08"}]}